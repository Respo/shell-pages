{:definitions {"stack-workflow.core/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]], "stack-workflow.core/-main!" ["defn" "-main!" [] ["enable-console-print!"] ["render-app!"] ["listen!" "routes/dict" "dispatch!" "routes/mode"] ["add-watch" "store-ref" ":changes" "render-app!"] ["add-watch" "states-ref" ":changes" "render-app!"] ["println" "|app started!"]], "stack-workflow.comp.sidebar/render" ["defn" "render" [] ["fn" ["state" "mutate!"] ["div" ["{}"] ["div" ["{}" [":event" ["{}" [":click" ["on-route" "|/"]]]]] ["comp-text" "|/" "nil"]] ["div" ["{}" [":event" ["{}" [":click" ["on-route" "|/about.html"]]]]] ["comp-text" "|about.html" "nil"]] ["div" ["{}" [":event" ["{}" [":click" ["on-route" "|/post/a.html"]]]]] ["comp-text" "|post/a.html" "nil"]] ["div" ["{}" [":event" ["{}" [":click" ["on-route" "|/post/b.html"]]]]] ["comp-text" "|post/b.html" "nil"]]]]], "stack-workflow.comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]], "stack-workflow.comp.container/render" ["defn" "render" ["store"] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" ["merge" "ui/global"]]] ["comp-sidebar"] ["div" ["{}" [":style" "ui/button"]] ["comp-text" ["pr-str" "store"] "nil"]] ["comp-router" [":router" "store"] "routes/dict" "routes/mode"]]]], "stack-workflow.comp.sidebar/comp-sidebar" ["def" "comp-sidebar" ["create-comp" ":sidebar" "render"]], "stack-workflow.routes/dict" ["def" "dict" ["{}" ["|home" ["[]"]] ["|about.html" ["[]"]] ["|post" ["[]" "|post"]]]], "stack-workflow.core/dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["println" "|dispatch!" "op" "op-data"] ["let" [["new-store" ["case" "op" [":router/nav" ["assoc" "@store-ref" ":router" ["parse-address" "op-data" "routes/dict"]]] "@store-ref"]]] ["println" "new-store"] ["reset!" "store-ref" "new-store"]]], "stack-workflow.core/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "stack-workflow.core/on-jsload!" ["defn" "on-jsload!" [] ["clear-cache!"] ["render-app!"] ["println" "|code update."]], "stack-workflow.core/store-ref" ["defonce" "store-ref" ["let" [["store-el" [".querySelector" "js/document" "|#store"]]] ["if" ["some?" "store-el"] ["atom" ["pr-str" [".-innerHTML" "store-el"]]] ["atom" ["assoc" "schema/store" ":router" ["parse-address" ["str" [".-pathname" "js/location"] [".-search" "js/location"]] "routes/dict"]]]]]], "stack-workflow.schema/store" ["def" "store" ["{}" [":router" "router-schema/router"]]], "stack-workflow.comp.sidebar/on-route" ["defn" "on-route" ["path"] ["fn" ["e" "dispatch!"] ["dispatch!" ":router/nav" "path"]]], "stack-workflow.routes/mode" ["def" "mode" ":history"]}, :namespaces {"stack-workflow.comp.container" ["ns" "stack-workflow.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "stack-workflow.routes" ":as" "routes"] ["[]" "respo-router.comp.router" ":refer" ["[]" "comp-router"]] ["[]" "stack-workflow.comp.sidebar" ":refer" ["[]" "comp-sidebar"]]]], "stack-workflow.core" ["ns" "stack-workflow.core" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!"]] ["[]" "stack-workflow.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]] ["[]" "respo-router.util.listener" ":refer" ["[]" "listen!" "parse-address"]] ["[]" "stack-workflow.routes" ":as" "routes"] ["[]" "stack-workflow.schema" ":as" "schema"]]], "stack-workflow.routes" ["ns" "stack-workflow.routes"], "stack-workflow.schema" ["ns" "stack-workflow.schema" [":require" ["[]" "respo-router.schema" ":as" "router-schema"]]], "stack-workflow.comp.sidebar" ["ns" "stack-workflow.comp.sidebar" [":require" ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-ui.style" ":as" "ui"]]]}, :procedures {"stack-workflow.core" [["set!" [".-onload" "js/window"] "-main!"]], "stack-workflow.routes" [], "stack-workflow.schema" [], "stack-workflow.comp.sidebar" []}}